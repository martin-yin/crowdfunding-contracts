{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/Crowdfunding.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.27;\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\n\r\n// 众筹合约自身的功能\r\ncontract Crowdfunding is Pausable, Ownable {\r\n    string public name; // 众筹项目名称\r\n    string public description; // 众筹项目描述\r\n    uint256 public goal; // 众筹目标金额\r\n    uint256 public deadline;\r\n\r\n    enum CampaignState {\r\n        Active,\r\n        Successful,\r\n        Failed\r\n    } // 众筹的状态枚举\r\n    \r\n    CampaignState public state; // 当前众筹的状态\r\n\r\n    struct Tier {\r\n        string name; // 等级名称\r\n        uint256 amount; // 等级目标金额\r\n        uint256 backers; // 等级持续时间\r\n    }\r\n    Tier[] public tiers;\r\n\r\n    struct Backer {\r\n        uint256 totalContribution;\r\n        mapping(uint256 => bool) fundedTiers;\r\n    }\r\n\r\n    mapping(address => Backer) public backers;\r\n\r\n    modifier campaignOpen() {\r\n        require(state == CampaignState.Active, \"Campaign is not active.\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _owner,\r\n        string memory _name,\r\n        string memory _description,\r\n        uint256 _goal,\r\n        uint256 _duratyionInDays) Ownable(_owner) {\r\n        name = _name;\r\n        description = _description;\r\n        goal = _goal;\r\n        deadline = block.timestamp + (_duratyionInDays * 1 days);\r\n        state = CampaignState.Active;\r\n    }\r\n\r\n    // 检查并更新众筹状态\r\n    function checkAndUpdateCampaignState() internal {\r\n        if (state == CampaignState.Active) {\r\n            if (block.timestamp >= deadline) {\r\n                state = address(this).balance >= goal\r\n                    ? CampaignState.Successful\r\n                    : CampaignState.Failed;\r\n            } else {\r\n                state = address(this).balance >= goal\r\n                    ? CampaignState.Successful\r\n                    : CampaignState.Active;\r\n            }\r\n        }\r\n    }\r\n\r\n    function fund(uint256 _tierIndex) public payable campaignOpen whenNotPaused() {\r\n        require(_tierIndex < tiers.length, \"Invalid tier.\");\r\n        require(msg.value == tiers[_tierIndex].amount, \"Invalid amount.\");\r\n\r\n        tiers[_tierIndex].backers++;\r\n        backers[msg.sender].totalContribution += msg.value;\r\n        backers[msg.sender].fundedTiers[_tierIndex] = true;\r\n\r\n        checkAndUpdateCampaignState();\r\n    }\r\n\r\n    function addTier(string memory _name, uint256 _amount) public onlyOwner {\r\n        require(_amount > 0, \"Amount must be greater than 0.\");\r\n        tiers.push(Tier(_name, _amount, 0));\r\n    }\r\n\r\n    function removeTier(uint256 _index) public onlyOwner {\r\n        require(_index < tiers.length, \"Tier does not exist.\");\r\n        tiers[_index] = tiers[tiers.length - 1];\r\n        tiers.pop();\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        checkAndUpdateCampaignState();\r\n        require(state == CampaignState.Successful, \"Campaign not successful.\");\r\n\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No balance to withdraw\");\r\n\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function refund() public {\r\n        checkAndUpdateCampaignState();\r\n        require(state == CampaignState.Failed, \"Refunds not available.\");\r\n\r\n        uint256 amount = backers[msg.sender].totalContribution;\r\n        require(amount > 0, \"No contributions to refund.\");\r\n\r\n        backers[msg.sender].totalContribution = 0;\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    function hasFundedTier(\r\n        address _backer,\r\n        uint256 _tierIndex\r\n    ) public view returns (bool) {\r\n        return backers[_backer].fundedTiers[_tierIndex];\r\n    }\r\n\r\n    function getTiers() public view returns (Tier[] memory) {\r\n        return tiers;\r\n    }\r\n\r\n    // function togglePause() public onlyOwner {\r\n    //     paused = !paused;\r\n    // }\r\n\r\n    function getCampaignStatus() public view returns (CampaignState) {\r\n        if (state == CampaignState.Active && block.timestamp > deadline) {\r\n            return\r\n                address(this).balance >= goal\r\n                    ? CampaignState.Successful\r\n                    : CampaignState.Failed;\r\n        }\r\n        return state;\r\n    }\r\n\r\n    function extendDeadline(uint256 _daysToAdd) public onlyOwner campaignOpen {\r\n        deadline += _daysToAdd * 1 days;\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n}\r\n"
    },
    "contracts/CrowdfundingFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.27;\r\nimport { Crowdfunding } from \"./Crowdfunding.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\n\r\ncontract CrowdfundingFactory is Pausable, Ownable {\r\n    struct Campaign {\r\n        address owner; // 拥有人\r\n        address campaignAddress; // 众筹合约地址\r\n        string name; // 众筹名称\r\n        uint256 creationTime; // 创建时间\r\n    }\r\n    Campaign\r\n    [] private campaigns;\r\n    \r\n    mapping(address => Campaign[]) private userCampaigns; // 每个地址创建的众筹\r\n\r\n    constructor(address _owner) Ownable(_owner) {}\r\n\r\n    // 创建众筹合约\r\n    function createCampaign(\r\n        string memory _name,\r\n        string memory _description,\r\n        uint256 _goal,\r\n        uint256 _durationInDays\r\n    ) external whenNotPaused {\r\n\r\n        Crowdfunding newCampaign = new Crowdfunding(\r\n            msg.sender,\r\n            _name,\r\n            _description,\r\n            _goal,\r\n            _durationInDays\r\n        );\r\n\r\n        address campaignAddress = address(newCampaign);\r\n\r\n        Campaign memory campaign = Campaign({\r\n            campaignAddress: campaignAddress,\r\n            owner: msg.sender,\r\n            name: _name,\r\n            creationTime: block.timestamp\r\n        });\r\n\r\n        campaigns.push(campaign);\r\n        userCampaigns[msg.sender].push(campaign);\r\n    }\r\n\r\n    // 获取地址的众筹数据\r\n    function getUserCampaigns(\r\n        address _user\r\n    ) external view returns (Campaign[] memory) {\r\n        return userCampaigns[_user];\r\n    }\r\n\r\n    // 返回所有的众筹\r\n    function getALlCampaigns() external view returns (Campaign[] memory) {\r\n        return campaigns;\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}